
一、
	var 声明的变量是全局的，就算是在代码快里，也会污染全局。
	
二、
	js浮点数运算会存在误差。
	
三、数组的操作：
	1.shift()，删除数组的第一项，返回删除元素的值，如果数组为空则返回undefined。
		var a = [1,2,3,4,5];
		var b = a.shift(); //a:[2,3,4,5] b:1 
		
	2.unshift(),将参数添加到数组开头，并返回数组的长度。 
		var a = [1,2,3,4,5];
		var b = a.unshift(-2,-1); //a:[-2,-1,1,2,3,4,5] b:7
		注:在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。
		
	3.pop(),删除数组的最后一项，并返回删除元素的值，如果数组为空，则返回undefined。
		var a = [1,2,3,4,5];
		var b = a.pop(); //a:[1,2,3,4] b:5
		
	4.push(),将参数添加到数组末尾，返回数组的长度。
		var a = [1,2,3,4,5];
		var b = a.push(6,7); //a:[1,2,3,4,5,6,7] b:7 
		
	5.concat(),返回一个新数组，是将参数添加到原数组中构成的。
		var a = [1,2,3,4,5];
		var b = a.concat(6,7); //a:[1,2,3,4,5] b:[1,2,3,4,5,6,7]
		
	6.splice(start, deleteCount, val1, val2, ...), 从start位置开始，删除deleteCount项，并从该位置起插入val1,val2,...
		var a = [1,2,3,4,5];
		var b = a.splice(2,2,7,8,9); //a:[1,2,7,8,9,5] b:[3,4]
		var b = a.splice(0,1); //同shift
		a.splice(0,0,-2,-1); var b = a.length; //同unshift  
		var b = a.splice(a.length-1,1); //同pop
		a.splice(a.length,0,6,7); var b = a.length; //同push
		
	7.reverse(),将数组反序。
		var a = [1,2,3,4,5];
		var b = a.reverse(); //a:[5,4,3,2,1] b:[5,4,3,2,1]
		
	8.sort(orderfunction):按指定的参数对数组进行排序。
		var a = [1,2,3,4,5];
		var b = a.sort(); //a:[1,2,3,4,5] b:[1,2,3,4,5]
		
	9.slice(start,end):返回从原数组中指定开始下标到结束下标之间的项组成的新数组。 
		var a = [1,2,3,4,5];	
		var b = a.slice(2,5); //a:[1,2,3,4,5] b:[3,4,5]
		
	10.join(separator):将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符。
	
四、数组遍历:
	1.for 语句:
		var arr = [1,2,4,6]
		for(var i = 0, len = arr.length; i < len; i++){
			console.log(arr[i])
		}
		
	2.forEach 语句:
		var arr = [1,5,8,9]
		arr.forEach(function(item) {
			console.log(item);
		})
		
	3.for-in 语句:
		var obj = {
			name: 'test',
			color: 'red',
			day: 'sunday',
			number: 5
		}
		for (var key in obj) {
			console.log(obj[key])
		}
	
	4.for-of 语句 (ES 6):
		var arr = [{name:'bb'},5,'test']
		for (item of arr) {
			console.log(item)
		}

	for-of 和 for-in 的区别:
		for-in 语句以原始插入顺序迭代对象的可枚举属性。for-in会把继承链的对象属性都会遍历一遍,所以会更花时间.
		for-of 语句只遍历可迭代对象的数据。
		
	
	循环方法:
		1.map 方法 (不改变原数组):会给原数组中的每个元素都按顺序调用一次  callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。让数组通过某种计算产生一个新数组,影射成一个新的数组。
		2.reduce 方法：让数组中的前项和后项做某种计算,并累计最终值。
		3.filter 方法 (不改变原数组)：为数组中的每个元素调用一次 callback 函数，并利用所有使得 callback 返回 true 或 等价于 true 的值 的元素创建一个新数组。callback 只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用。那些没有通过 callback 测试的元素会被跳过，不会被包含在新数组中。筛选出过滤出数组中符合条件的项,组成新数组。
		4.every 方法：为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。检测数组中的每一项是否符合条件,如果每一项都符合条件,就会返回true,否则返回false,有点像遍历数组且操作callback。只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。
		5.some 方法：为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some 将会立即返回 true。否则，some 返回 false。callback 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。检查数组中是否有某些项符号条件,如果有一项就返回true,否则返回false,有点像遍历数组或者操作。
		
		
五、javascript的数据类型：
	undefined、null、String、Numben、Boolean、Object、Symbol(ES6引入的一种新的原始数据类型)
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		