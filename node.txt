
一、开启严格模式： node --use_strict hello.js(--use_strict参数来开启严格模式。)

二、对象：
	1.全局对象(global)：JavaScript有且仅有一个全局对象，在浏览器中，叫window对象。而在Node.js环境中，也有唯一的全局对象，但不叫window，而叫global，这个对象的属性和方法也和浏览器环境的window不同。
	2.进程对象(process)：是Node.js提供的一个对象，它代表当前Node.js进程。
		JavaScript程序是由事件驱动执行的单线程模型，Node.js也不例外。Node.js不断执行响应事件的JavaScript函数，直到没有任何响应事件的函数可以执行时，Node.js就退出了。
		如果我们想要在下一次事件响应中执行代码，可以调用process.nextTick()：
			// process.nextTick()将在下一轮事件循环中调用:
			process.nextTick(function () {
				console.log('nextTick callback!');
			});
			console.log('nextTick was set!');
			//执行结果
			//nextTick was set!
			//nextTick callback!
		这说明传入process.nextTick()的函数不是立刻执行，而是要等到下一次事件循环。

		Node.js进程本身的事件就由process对象来处理。如果我们响应exit事件，就可以在程序即将退出时执行某个回调函数：
			// 程序即将退出时的回调函数:
			process.on('exit', function (code) {
				console.log('about to exit with code: ' + code);
			});

三、判断JavaScript执行环境
	有很多JavaScript代码既能在浏览器中执行，也能在Node环境执行，但有些时候，程序本身需要判断自己到底是在什么环境下执行的，常用的方式就是根据浏览器和Node环境提供的全局变量名称来判断：
		if (typeof(window) === 'undefined') {
			console.log('node.js');
		} else {
			console.log('browser');
		}


四、模块(fs),文件系统模块，负责读写文件。和所有其它JavaScript模块不同的是，fs模块同时提供了异步和同步的方法。	
		1.异步：
		var fs = require('fs');

		fs.readFile('sample.png', function (err, data) {
			if (err) {
				console.log(err);
			} else {
				console.log(data);
				console.log(data.length + ' bytes');
			}
		});
		2.同步：
		var fs = require('fs');

		var data = fs.readFileSync('sample.txt', 'utf-8');
		console.log(data);
		如果同步读取文件发生错误，则需要用try...catch捕获该错误：
		try {
			var data = fs.readFileSync('sample.txt', 'utf-8');
			console.log(data);
		} catch (err) {
			// 出错了
		}
		
		
		3.写文件： 
			异步：
			var data = 'Hello, Node.js';
			fs.writeFile('output.txt', data, function (err) {
				if (err) {
					console.log(err);
				} else {
					console.log('ok.');
				}
			});
			同步：
			var fs = require('fs');

			var data = 'Hello, Node.js';
			fs.writeFileSync('output.txt', data);
		
		
		4.获取文件的创建信息
			fs.stat('sample.txt', function (err, stat) {
				if (err) {
					console.log(err);
				} else {
					// 是否是文件:
					console.log('isFile: ' + stat.isFile());
					// 是否是目录:
					console.log('isDirectory: ' + stat.isDirectory());
					if (stat.isFile()) {
						// 文件大小:
						console.log('size: ' + stat.size);
						// 创建时间, Date对象:
						console.log('birth time: ' + stat.birthtime);
						// 修改时间, Date对象:
						console.log('modified time: ' + stat.mtime);
					}
				}
			});
			stat()也有一个对应的同步函数statSync();
		
		
五、模块(stream)在服务区端可用的模块，目的是支持“流”这种数据结构。流也是一个对象，我们只需要响应流的事件就可以了：data事件表示流的数据已经可以读取了，end事件表示这个流已经到末尾了，没有数据可以读取了，error事件表示出错了。
		'use strict';

		var fs = require('fs');

		// 打开一个流:
		var rs = fs.createReadStream('sample.txt', 'utf-8');

		rs.on('data', function (chunk) {
			console.log('DATA:')
			console.log(chunk);
		});

		rs.on('end', function () {
			console.log('END');
		});

		rs.on('error', function (err) {
			console.log('ERROR: ' + err);
		});
		要注意，data事件可能会有多次，每次传递的chunk是流的一部分数据。
		
		要以流的形式写入文件，只需要不断调用write()方法，最后以end()结束：
		'use strict';

		var fs = require('fs');

		var ws1 = fs.createWriteStream('output1.txt', 'utf-8');
		ws1.write('使用Stream写入文本数据...\n');
		ws1.write('END.');
		ws1.end();

		var ws2 = fs.createWriteStream('output2.txt');
		ws2.write(new Buffer('使用Stream写入二进制数据...\n', 'utf-8'));
		ws2.write(new Buffer('END.', 'utf-8'));
		ws2.end();
		所有可以读取数据的流都继承自stream.Readable，所有可以写入的流都继承自stream.Writable。
	
	pipe：一个Readable流和一个Writable流串起来后，所有的数据自动从Readable流进入Writable流，这种操作叫pipe。
		用pipe()把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，这实际上是一个复制文件的程序：
			'use strict';

			var fs = require('fs');

			var rs = fs.createReadStream('sample.txt');
			var ws = fs.createWriteStream('copied.txt');

			rs.pipe(ws);
		默认情况下，当Readable流的数据读取完毕，end事件触发后，将自动关闭Writable流。如果我们不希望自动关闭Writable流，需要传入参数：
			readable.pipe(writable, { end: false })
		
		
		
六、linux下安装node.js
	方法一： 直接安装编译好的 Nodejs（推荐）
	1.下载对应的二进制文件，wget https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x64.tar.xz
	2.解压为tar类型，xz -d node-v6.9.2-linux-x64.tar.xz
	3.解压，tar -xvf node-v6.9.2-linux-x64.tar
	
	这种方式安装的node和npm不是全局的，可以通过建立两个软链接来实现：
		ln -s /usr/local/node-v6.9.2-linux-x64/bin/node /usr/local/bin/node
		ln -s /usr/local/node-v6.9.2-linux-x64/bin/npm /usr/local/bin/npm
		注：/usr/local/node-v6.9.2-linux-x64/bin/node 为解压按钮node后的路径，后面的 /usr/local/bin/node 为软链接指向路径。


七、linux下安装cnpm
	npm install -g cnpm --registry=https://registry.npm.taobao.org
	node链接：ln -s /usr/local/src/node-v8.10.0/bin/cnpm /usr/local/bin/
		
		
八、解决linux 下node.js全局模块找不到
	例如：全局安装pm2后 pm2 ls 报错
	在linux上配置环境变量很简单，只需要修改 /etc/profile 文件就可以了，在profile文件最后写上node模块的目录就可以了。
	
	sudo vi /etc/profile
	
	export NODE_HOME=/usr/local/node/node-v7.3.0-linux-x64/bin
	export PATH=$NODE_HOME:$PATH
	注意，修改了环境变量之后需要注销再重新登录服务器才会生效，我是用的云服务器，直接退出系统再重新连接，然后修改的配置就生效了。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
 
 